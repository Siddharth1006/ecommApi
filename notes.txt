//Installation done using npm.

1. Install Express.
$ npm install express <Enter>

2. Install MonogDb
Link: https://www.mongodb.com/docs/manual/tutorial/install-mongodb-on-ubuntu/

Now install mongoose :
https://www.npmjs.com/package/mongoose

3. Install nodemon
Link: https://www.npmjs.com/package/nodemon
(Installed globally so its not showing in package.json file)

4.Install dotenv
Link: https://www.npmjs.com/package/dotenv 

Step2:
We will be using nodemon to continuosly hot reload the changed/edited file, save it and runs the app automatically.

For that, go to package.json > "scripts" > "test" and change test to "start".
and then "echo \"Error: no test specified\" && exit 1" to "nodemon index.js"


Step3:
Go to terminal and type : $ npm start  => nodemon is in action! If you make any edits, nodemon will
automatically "hot-reload" the application!

MongoDB vs Mongoose?
--------------------
=> In terms of Node.js, mongodb is the native driver for interacting with a mongodb instance and mongoose 
is an Object modeling tool for MongoDB.
=> mongoose is built on top of the mongodb driver to provide programmers with a way to model their data.
=> Using mongoose, a user can define the schema for the documents in a particular collection. 
It provides a lot of convenience in the creation and management of data in MongoDB. 
On the downside, learning mongoose can take some time, and has some limitations in handling schemas that are quite complex.

Mongoose and MongoDb References:
https://www.freecodecamp.org/news/introduction-to-mongoose-for-mongodb-d2a7aa593c57/ 
https://www.mongodb.com/developer/languages/javascript/mongoose-versus-nodejs-driver/ 

Step 4: Now to connect to MongoDB database
We create an account on cloud.mongodb.com
Then we create a free cluster. 
Assign Ip address as 0.0.0.0 => means every server can access the db from anywhere in the world.
If we are working on local host we can just leave it as it is.

However , if we are deploying the application, we need to change the IP to our Server IP.

Now to connect to the database, click on the Connect button.
Choose Connection Method > Connect your application > Copy the url and paste it in a secure file.

We have .env file from where we will be fetching the url in index.js as follows:
Assuming the url is saved as MONGO_URL = the url,
we can fetch the url and connect to the database as follow:

mongoose.connect(process.env.MONGO_URL)
.then(() => console.log("Success")) //if connection was successful "then" this code is executed
.catch((err) => console.log("Connection failed")); // else this code.

In the url , you need to change the username , password and database name. Otherwise it wont get connected.

Routes - to create RestApi so we will be using endpoints.


NOTE: If you are using Crypto js library then we need to install it.
$ npm install crypto-js

Install jwt - jsonwebtoken (For extra security during login)
$ npm install jsonwebtoken

HIGHLY IMPORTANT NOTE : Whenever you are adding a user, make sure the PASSWORD_SEC_KEY is constant. 
Also, if you decide to change it,
then, delete all the users and add them once again with the new PASSWORD_SEC_KEY. Same goes with JWT_SEC_KEY.

//========================================================

Git Issues I faced:
------------------

https://www.thegeekstuff.com/2019/03/git-create-dev-branch-and-merge/ 

After creating repository, I tried to push, but github says compare and pull request. 
When I see there, there isn't anything to compare. Its the first pull request. 
So Solution:

https://stackoverflow.com/questions/23344320/there-isnt-anything-to-compare-nothing-to-compare-branches-are-entirely-diffe

Git Merge and Push Error:
https://stackoverflow.com/questions/13597494/git-merge-and-push

Remember:

[05:59:24 pm] siddharth@Cinnamon: [/home/siddharth/Desktop/Projects/ecommApi]  (main ✓)
  ▶  git push
fatal: The current branch main has no upstream branch.
To push the current branch and set the remote as upstream, use

    git push --set-upstream origin main

[05:20:36 pm] siddharth@Cinnamon: [/home/siddharth/Desktop/Projects/ecommApi]  (main → origin ↑1 ↓1 ✓)
  ▶  git push
To https://github.com/Siddharth1006/ecommApi.git
 ! [rejected]        main -> main (non-fast-forward)
error: failed to push some refs to 'https://github.com/Siddharth1006/ecommApi.git'
hint: Updates were rejected because the tip of your current branch is behind
hint: its remote counterpart. Integrate the remote changes (e.g.
hint: 'git pull ...') before pushing again.
hint: See the 'Note about fast-forwards' in 'git push --help' for details.

Soln: 
"The tip of your current branch is behind its remote counterpart"* means that there have been changes on the 
remote branch that you don’t have locally. 
And Git tells you to import new changes from REMOTE and merge it with your code and then push it to remote.

You can use this command to force changes to the server with the local repository (). 
remote repo code will be replaced with your local repo code.

$ git push -f origin main

Git fetch vs pull?
=================
Git Fetch is the command that tells the local repository that there are changes available in the remote repository without bringing the changes into the local repository. 
Git Pull on the other hand brings the copy of the remote directory changes into the local repository

REMEMBER THIS:
-------------
https://stackoverflow.com/questions/8196544/what-are-the-git-concepts-of-head-master-origin

ERRORS:

throw new TypeError('Router.use() requires a middleware function but got a ' + gettype(fn))
Ans : https://stackoverflow.com/questions/27465850/typeerror-router-use-requires-middleware-function-but-got-a-object

Why ports?
=========
https://www.cloudflare.com/en-in/learning/network-layer/what-is-a-computer-port/
https://www.networkwebcams.co.uk/blog/2010/02/17/network-port-and-why-do-i-need-one/

https://www.lifewire.com/port-numbers-on-computer-networks-817939
https://www.techtarget.com/searchnetworking/definition/port-number 


